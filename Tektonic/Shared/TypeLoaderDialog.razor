@inject Tektonic.CodeGen.TypeLoader TypeLoader
@inject Tektonic.CodeGen.TypeMapManager TypeMapManager
@using Tektonic.CodeGen 

<BFUModal ContainerClass="modalContainerOverride" IsOpen="IsOpen" OnDismiss="Close">
    <ChildContent>
        <div style="padding:10px;" class="largeFont">
            <span>Load Types</span>
        </div>
        @if (!string.IsNullOrWhiteSpace(Message)) 
        {
            <BFUMessageBar MessageBarType="MessageType" OnDismiss="OnDismiss">
                <ChildContent>
                    @Message
                </ChildContent>
            </BFUMessageBar>
        }
        <div style="height: 250px;" data-is-scrollable>
            <BFUDetailsList ItemsSource="Packages" 
                            TItem="NuGetPackage"
                            Columns="Columns" 
                            SelectionMode="SelectionMode.None" 
                            Selection="selection" 
                            GetKey=@(item => item.Package) 
                            OnItemInvoked="OnItemClick"
                            LayoutMode="DetailsListLayoutMode.Justified"></BFUDetailsList>
        </div>
        <div style="padding: 10px;">
            <p>
                <BFUTextField Placeholder="NuGet Package" @bind-Value="packageName" @bind-Value:event="oninput" />
            </p>
        </div>
        <BFUActionButton Text="Add" IconName="Add" OnClick="Add" />
    </ChildContent>
</BFUModal>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    public string packageName { get; set; }

    private Selection<NuGetPackage> selection = new Selection<NuGetPackage>();

    private string Message { get; set; }
    private MessageBarType MessageType { get; set; }

    private List<NuGetPackage> Packages { get { return TypeMapManager.NuGetPackages ?? new List<NuGetPackage>(); } }

    private List<BFUDetailsRowColumn<NuGetPackage>> Columns { get; set; }

    protected override void OnInitialized()
    {
        Columns = new List<BFUDetailsRowColumn<NuGetPackage>>()
        {
            new BFUDetailsRowColumn<NuGetPackage>("Package", p => p.Package),
            new BFUDetailsRowColumn<NuGetPackage>("Version", p => p.Version)
        };
        selection.SelectionMode = SelectionMode.None;
    }

    private async void Add()
    {
        try
        {
            await TypeLoader.LoadAssemblyFromNuGetAsync(packageName);
            SetMessage($"{packageName} added successfully!");
        }
        catch (PackageAlreadyInstalledException)
        {
            SetMessage($"{packageName} has already been installed. To install a different version, please refresh the page and try again.", MessageBarType.Blocked);
        }
        catch (Exception ex)
        {
            SetMessage($"Failed to add NuGet Package {packageName}. {ex.Message}", MessageBarType.Error);
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void SetMessage(string message, MessageBarType messageBarType = MessageBarType.Success)
    {
        MessageType = messageBarType;
        Message = message;
    }

    private void OnDismiss() { Message = null; StateHasChanged(); }

    private void OnItemClick(NuGetPackage item) { Console.WriteLine("Click"); }

    private async void Close()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
        StateHasChanged();
    }
}